package org.web3j.examples;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class PermissionSystem extends Contract {
    private static final String BINARY = "";

    protected PermissionSystem(String contractAddress, Web3j web3j, TransactionManager transactionManager) {
        super(BINARY, contractAddress, web3j, transactionManager);
    }

    public List<GroupNewedEventResponse> getGroupNewedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GroupNewed", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<GroupNewedEventResponse> responses = new ArrayList<GroupNewedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            GroupNewedEventResponse typedResponse = new GroupNewedEventResponse();
            typedResponse._user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._group = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._newGroup = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GroupNewedEventResponse> groupNewedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GroupNewed", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GroupNewedEventResponse>() {
            @Override
            public GroupNewedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                GroupNewedEventResponse typedResponse = new GroupNewedEventResponse();
                typedResponse._user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._group = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._newGroup = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<GroupInitedEventResponse> getGroupInitedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GroupInited", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<GroupInitedEventResponse> responses = new ArrayList<GroupInitedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            GroupInitedEventResponse typedResponse = new GroupInitedEventResponse();
            typedResponse._root = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._subSwitch = (Boolean) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._adamEve = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GroupInitedEventResponse> groupInitedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GroupInited", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bool>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GroupInitedEventResponse>() {
            @Override
            public GroupInitedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                GroupInitedEventResponse typedResponse = new GroupInitedEventResponse();
                typedResponse._root = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._subSwitch = (Boolean) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._adamEve = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RoleInitedEventResponse> getRoleInitedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RoleInited", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RoleInitedEventResponse> responses = new ArrayList<RoleInitedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RoleInitedEventResponse typedResponse = new RoleInitedEventResponse();
            typedResponse._basic = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._permissions = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RoleInitedEventResponse> roleInitedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RoleInited", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RoleInitedEventResponse>() {
            @Override
            public RoleInitedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RoleInitedEventResponse typedResponse = new RoleInitedEventResponse();
                typedResponse._basic = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._permissions = (List<byte[]>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<AuthorizationInitedEventResponse> getAuthorizationInitedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("AuthorizationInited", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<AuthorizationInitedEventResponse> responses = new ArrayList<AuthorizationInitedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            AuthorizationInitedEventResponse typedResponse = new AuthorizationInitedEventResponse();
            typedResponse._group = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._role = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<AuthorizationInitedEventResponse> authorizationInitedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("AuthorizationInited", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, AuthorizationInitedEventResponse>() {
            @Override
            public AuthorizationInitedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                AuthorizationInitedEventResponse typedResponse = new AuthorizationInitedEventResponse();
                typedResponse._group = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._role = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<GroupAppliedEventResponse> getGroupAppliedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GroupApplied", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<GroupAppliedEventResponse> responses = new ArrayList<GroupAppliedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            GroupAppliedEventResponse typedResponse = new GroupAppliedEventResponse();
            typedResponse._user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._group = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GroupAppliedEventResponse> groupAppliedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GroupApplied", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GroupAppliedEventResponse>() {
            @Override
            public GroupAppliedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                GroupAppliedEventResponse typedResponse = new GroupAppliedEventResponse();
                typedResponse._user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._group = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApplyApprovedEventResponse> getApplyApprovedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ApplyApproved", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ApplyApprovedEventResponse> responses = new ArrayList<ApplyApprovedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ApplyApprovedEventResponse typedResponse = new ApplyApprovedEventResponse();
            typedResponse._user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._group = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._resource = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._role = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApplyApprovedEventResponse> applyApprovedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ApplyApproved", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApplyApprovedEventResponse>() {
            @Override
            public ApplyApprovedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ApplyApprovedEventResponse typedResponse = new ApplyApprovedEventResponse();
                typedResponse._user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._group = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._resource = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._role = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RoleGrantedEventResponse> getRoleGrantedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RoleGranted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RoleGrantedEventResponse> responses = new ArrayList<RoleGrantedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
            typedResponse._group = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._resource = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._role = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._users = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RoleGrantedEventResponse> roleGrantedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RoleGranted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RoleGrantedEventResponse>() {
            @Override
            public RoleGrantedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RoleGrantedEventResponse typedResponse = new RoleGrantedEventResponse();
                typedResponse._group = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._resource = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._role = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._users = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<RoleRevokedEventResponse> getRoleRevokedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("RoleRevoked", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<RoleRevokedEventResponse> responses = new ArrayList<RoleRevokedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
            typedResponse._group = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._resource = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._role = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._users = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<RoleRevokedEventResponse> roleRevokedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("RoleRevoked", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, RoleRevokedEventResponse>() {
            @Override
            public RoleRevokedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                RoleRevokedEventResponse typedResponse = new RoleRevokedEventResponse();
                typedResponse._group = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._resource = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._role = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._users = (List<String>) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<GroupQuittedEventResponse> getGroupQuittedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GroupQuitted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<GroupQuittedEventResponse> responses = new ArrayList<GroupQuittedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            GroupQuittedEventResponse typedResponse = new GroupQuittedEventResponse();
            typedResponse._user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._group = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GroupQuittedEventResponse> groupQuittedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GroupQuitted", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GroupQuittedEventResponse>() {
            @Override
            public GroupQuittedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                GroupQuittedEventResponse typedResponse = new GroupQuittedEventResponse();
                typedResponse._user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._group = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<QuitApprovedEventResponse> getQuitApprovedEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("QuitApproved", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<QuitApprovedEventResponse> responses = new ArrayList<QuitApprovedEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            QuitApprovedEventResponse typedResponse = new QuitApprovedEventResponse();
            typedResponse._user = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse._group = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse._resource = (byte[]) eventValues.getIndexedValues().get(2).getValue();
            typedResponse._role = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<QuitApprovedEventResponse> quitApprovedEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("QuitApproved", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, QuitApprovedEventResponse>() {
            @Override
            public QuitApprovedEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                QuitApprovedEventResponse typedResponse = new QuitApprovedEventResponse();
                typedResponse._user = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse._group = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse._resource = (byte[]) eventValues.getIndexedValues().get(2).getValue();
                typedResponse._role = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<List> queryUsers(byte[] _group) {
        Function function = new Function("queryUsers", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> deleteRole(byte[] _role, byte[] _group, byte[] _resource, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "deleteRole", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<Tuple5<List<String>, List<byte[]>, Boolean, byte[], String>> queryGroupInfo(byte[] _group) {
        final Function function = new Function("queryGroupInfo", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<Bool>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple5<List<String>, List<byte[]>, Boolean, byte[], String>>(
                new Callable<Tuple5<List<String>, List<byte[]>, Boolean, byte[], String>>() {
                    @Override
                    public Tuple5<List<String>, List<byte[]>, Boolean, byte[], String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple5<List<String>, List<byte[]>, Boolean, byte[], String>(
                                (List<String>) results.get(0).getValue(), 
                                (List<byte[]>) results.get(1).getValue(), 
                                (Boolean) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (String) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<TransactionReceipt> modifyRoleName(byte[] _oldName, byte[] _newName, byte[] _group, byte[] _resource, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "modifyRoleName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_oldName), 
                new org.web3j.abi.datatypes.generated.Bytes32(_newName), 
                new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<Boolean> querySubSwitch(byte[] _group) {
        Function function = new Function("querySubSwitch", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> approveQuit(byte[] _group, byte[] _resource, byte[] _role, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "approveQuit", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> quitGroup(byte[] _group, BigInteger quota, BigInteger nonce,
                                                    BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "quitGroup", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> revokeRole(byte[] _group, byte[] _resource, byte[] _role, List<String> _users, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "revokeRole", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(_users, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<byte[]> queryParentGroup(byte[] _group) {
        Function function = new Function("queryParentGroup", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> setAuthorization(byte[] _group, byte[] _role, byte[] _resource, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "setAuthorization", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> newGroup(byte[] _group, byte[] _newName, List<String> _newUsers, Boolean _newSubSwitch, BigInteger _op, byte[] _role, String _profile, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "newGroup", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_newName), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(_newUsers, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Bool(_newSubSwitch), 
                new org.web3j.abi.datatypes.generated.Uint8(_op), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.Utf8String(_profile)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> initRole(byte[] _basic, List<byte[]> _permissions, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "initRole", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_basic), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.Utils.typeMap(_permissions, org.web3j.abi.datatypes.generated.Bytes32.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<String> queryProfile(byte[] _group) {
        Function function = new Function("queryProfile", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> modifySubSwitch(byte[] _group, byte[] _resource, byte[] _role, Boolean _newSubSwitch, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "modifySubSwitch", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.Bool(_newSubSwitch)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<List> queryRoles(byte[] _group) {
        Function function = new Function("queryRoles", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<List> queryPermissions(byte[] _role) {
        Function function = new Function("queryPermissions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_role)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<Boolean> checkPermission(String _user, byte[] _userGroup, byte[] _resourceGroup, byte[] _role, byte[] _permission) {
        Function function = new Function("checkPermission", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user), 
                new org.web3j.abi.datatypes.generated.Bytes32(_userGroup), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resourceGroup), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.generated.Bytes32(_permission)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> deleteGroup(byte[] _group, byte[] _resource, byte[] _role, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "deleteGroup", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> addPermissions(byte[] _role, List<byte[]> _permissions, byte[] _group, byte[] _resource, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "addPermissions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.Utils.typeMap(_permissions, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> initAuthorization(byte[] _group, byte[] _role, BigInteger quota,
                                                            BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "initAuthorization", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> deletePermissions(byte[] _role, List<byte[]> _permissions, byte[] _group, byte[] _resource, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "deletePermissions", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.Utils.typeMap(_permissions, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> modifyGroupName(byte[] _oldName, byte[] _newName, byte[] _resource, byte[] _role, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "modifyGroupName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_oldName), 
                new org.web3j.abi.datatypes.generated.Bytes32(_newName), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> cancelAuthorization(byte[] _group, byte[] _role, byte[] _resource, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "cancelAuthorization", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<List> queryGroups(String _user) {
        Function function = new Function("queryGroups", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_user)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> applyGroup(byte[] _group, BigInteger quota, BigInteger nonce,
                                                     BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "applyGroup", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> grantRole(byte[] _group, byte[] _resource, byte[] _role, List<String> _users, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "grantRole", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(_users, org.web3j.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> approveApply(byte[] _group, byte[] _resource, byte[] _role,
                                                       BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "approveApply", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<List> queryAllGroups() {
        Function function = new Function("queryAllGroups", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<String> querySuperAdmin() {
        Function function = new Function("querySuperAdmin", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> initGroup(byte[] _root, List<String> _adamEve, Boolean _subSwitch, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "initGroup", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_root), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(_adamEve, org.web3j.abi.datatypes.Address.class)), 
                new org.web3j.abi.datatypes.Bool(_subSwitch)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<TransactionReceipt> newRole(byte[] _group, byte[] _newName, byte[] _role, List<byte[]> _newPermissions, BigInteger _op, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "newRole", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_newName), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.generated.Bytes32>(
                        org.web3j.abi.Utils.typeMap(_newPermissions, org.web3j.abi.datatypes.generated.Bytes32.class)), 
                new org.web3j.abi.datatypes.generated.Uint8(_op)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<List> queryAllRoles() {
        Function function = new Function("queryAllRoles", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<TransactionReceipt> modifyProfile(byte[] _group, byte[] _resource, byte[] _role, String _newProfile, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version) {
        Function function = new Function(
                "modifyProfile", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group), 
                new org.web3j.abi.datatypes.generated.Bytes32(_resource), 
                new org.web3j.abi.datatypes.generated.Bytes32(_role), 
                new org.web3j.abi.datatypes.Utf8String(_newProfile)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, quota, nonce, validUntilBlock, BigInteger.valueOf(version));
    }

    public RemoteCall<List> querySubGroups(byte[] _group) {
        Function function = new Function("querySubGroups", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<List> queryBasicPermission() {
        Function function = new Function("queryBasicPermission", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public RemoteCall<List> queryAncestors(byte[] _group) {
        Function function = new Function("queryAncestors", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_group)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function, List.class);
    }

    public static RemoteCall<PermissionSystem> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger quota, BigInteger nonce, BigInteger validUntilBlock, int version, String _superAdmin, List<String> _adamEve) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_superAdmin), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Address>(
                        org.web3j.abi.Utils.typeMap(_adamEve, org.web3j.abi.datatypes.Address.class))));
        return deployRemoteCall(PermissionSystem.class, web3j, transactionManager, quota, nonce, validUntilBlock, BigInteger.valueOf(version), BINARY, encodedConstructor);
    }

    public static PermissionSystem load(String contractAddress, Web3j web3j, TransactionManager transactionManager) {
        return new PermissionSystem(contractAddress, web3j, transactionManager);
    }

    public static class GroupNewedEventResponse {
        public String _user;

        public byte[] _group;

        public byte[] _newGroup;
    }

    public static class GroupInitedEventResponse {
        public byte[] _root;

        public Boolean _subSwitch;

        public List<String> _adamEve;
    }

    public static class RoleInitedEventResponse {
        public byte[] _basic;

        public List<byte[]> _permissions;
    }

    public static class AuthorizationInitedEventResponse {
        public byte[] _group;

        public byte[] _role;
    }

    public static class GroupAppliedEventResponse {
        public String _user;

        public byte[] _group;
    }

    public static class ApplyApprovedEventResponse {
        public String _user;

        public byte[] _group;

        public byte[] _resource;

        public byte[] _role;
    }

    public static class RoleGrantedEventResponse {
        public byte[] _group;

        public byte[] _resource;

        public byte[] _role;

        public List<String> _users;
    }

    public static class RoleRevokedEventResponse {
        public byte[] _group;

        public byte[] _resource;

        public byte[] _role;

        public List<String> _users;
    }

    public static class GroupQuittedEventResponse {
        public String _user;

        public byte[] _group;
    }

    public static class QuitApprovedEventResponse {
        public String _user;

        public byte[] _group;

        public byte[] _resource;

        public byte[] _role;
    }
}
